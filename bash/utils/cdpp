#!/usr/bin/env bash

# DirStack - Emulate Zsh's behavior of pushd lifting the directory to tos instead of cycling the stack
# cd =      Lists the contents of the stack.
# cd +N     Exchanges the current directory with the directory stored in 'N'. 'cd +0' is a NOP.
# cd -      Is the same as 'cd +1'
# cd +      Pops the current directory off the stack and cd's to the next directory on the stack (equivalent to popd).
# cd        Goes to $REPO_PATH if it's set else goes to $HOME
# cd ,TARG  Jump to a directory in the path that starts with TARG. Case-insensitive and also supports fuzzy matching
unset -f cdpp
cdpp() {
  local _dir
  if (( $#==0 )); then
    _dir=${REPO_PATH-${HOME/%\//}}
  else
    until [[ $1 != "--" ]]; do
      shift;
    done
    _dir=${1/%\//}
  fi

  local _dirstack=($(command dirs))
  case ${_dir} in
    +[0-9]*)
      #echo "Jumping to a dir on the stack"
      # $[#_dirstack[@]] gives the number of elements in _dirstack
      #if ((${_dir}<$[#_dirstack[@]])); then
      command popd $1 > /dev/null
      command pushd ${_dirstack[$1]/#~/$HOME} > /dev/null
      ;;

    -)
      #echo "Jumping to the prev dir"
      command popd +1 > /dev/null
      command pushd ${_dirstack[1]/#~/$HOME} > /dev/null
      ;;

    +)
      #echo "Popping current dir from the stack"
      command popd > /dev/null
      ;;

    =)
      command dirs -v
      ;;

    *\*\**)
      local _src=${1%%\*\**}; _src=${_src:-.}
      local _dst=${1##*\*\*}
      # echo find ${_src} -type d -path "*${_dst}" -print -quit
      _dir=$(find ${_src} -type d -path "*${_dst}" -print -quit)
      if [[ -z ${_dir} ]]; then
        # find was unable to find a matching directory
        echo "ERROR: Unable to find ${_dst#/} under ${_src}"
        return 1
      fi
      ;;&  # This will cause it to get evaluated against *) as well

    ..*)
      # echo "Jumping to a parent dir in the path ($_dir)"
      # * If the arg is a number (..n), jump up n levels
      # * If the arg is a path (../...), go to it
      # * else try to find a match anywhere in the path and jump there

      _targ=${_dir:2}
      if [[ "$_targ" =~ ^[0-9]+$ ]]; then
        _dir=$(eval "printf '%0.s../' {1..$_targ}")
      elif [[ ! -d "$_dir" ]]; then
        _dir=$(jumper $_targ)
      fi
      # echo "DEBUG: In=$_targ, Dir=$_dir"

      ;;&  # This will cause it to get evaluated against *) as well

    *)
      # echo "Pushing $_dir onto the stack"
      command pushd ${_dir} > /dev/null
      if [[ $? != 0 ]]; then return; fi

      # Remove any duplicate entries
      # $[#_dirstack[@]] gives the number of elements in _dirstack
      local _i=0
      while (( $_i < ${#_dirstack[@]} )); do
        #echo $_i / ${#_dirstack[@]} : ${_dir/#~/$HOME} ${_dirstack[$_i]/#~/$HOME}
        if [ "$PWD" == "${_dirstack[$_i]/#~/$HOME}" ]; then
          command popd +$((($_i+1))) > /dev/null
          break
        fi
        let _i=$_i+1
      done
      ;;
  esac
}

alias cd=cdpp
