# systemverilog.snippets - Snippets for systemverilog file type
#
# $0 - Final position of cursor
#
priority -49

#===========================================================================
# Global functions
##
global !p
from UltiSnips_globals import *
endglobal



#===========================================================================
# Always blocks
##
snippet al "always/always_comb/always_ff/always_latch"
always$1`!p snip.rv = complete( t[1], ['_comb', '_ff', '_latch'] )`
endsnippet


pre_expand "snip.buffer[snip.line] = 'always'; snip.cursor.preserve()"
snippet always "always @( posedge clock ) .."
 @(${1:posedge clock}${2: or negedge reset}) begin
  ${0}
end
endsnippet


pre_expand "snip.buffer[snip.line] = 'always_comb'; snip.cursor.preserve()"
snippet always_comb "always_comb .."
 begin
  ${0}
end
endsnippet


pre_expand "snip.buffer[snip.line] = 'always_ff'; snip.cursor.preserve()"
snippet always_ff "always_ff .."
 @( ${1:posedge clk or negedge reset_n} )
  ${0}
end
endsnippet


pre_expand "snip.buffer[snip.line] = 'always_latch'; snip.cursor.preserve()"
snippet always_latch "always_latch .."

  ${0}
end
endsnippet



#===========================================================================
# Conditional blocks
##
snippet if "if() .. "
if ( ${1:condition} ) begin
  ${0}
end
endsnippet


snippet eli "else if .. "
else if ( ${1:condition}) begin
  ${2}
end
endsnippet


snippet el "else .. "
else begin
  ${0}
end
endsnippet


snippet case "case() .. "
case( ${1:expression} )
  ${2:value1}: begin
    ${0}
  end
  default: begin
  end
endcase
endsnippet


snippet casex "casex() .. "
casex( ${1:expression} )
  ${2:value1}: begin
    ${0}
  end
  default: begin
  end
endcase
endsnippet


snippet casez "casez() .. "
casez( ${1:expression} )
  ${2:value1}: begin
    ${0}
  end
  default: begin
  end
endcase
endsnippet


snippet class "class .. endclass"
class ${1:class_name} ${2:extends ${3:base_class}};
  ${0}
  function new(${4:args});
    super.new($4);
  endfunction: new
endclass: $1
endsnippet


snippet clocking "clocking .. { .. }"
clocking ${1:name_cb} @( posedge ${2:clock} );
  default input #${3:setup_time} output #${4:hold_time};
  // Input declarations
  // Output declarations
endclocking: $1
endsnippet


snippet final "final .."
final begin
  ${0}
end
endsnippet



#===========================================================================
# Loops
##
snippet for "for() .. "
for ( ${1:int i = 0}; ${2:i != n}; ${3:++i} ) begin
  ${0}
end
endsnippet


snippet foreach "foreach(x[i]) .."
foreach ( ${1:x}[i] ) begin
  ${0}
end
endsnippet


snippet forever "forever .. "
forever begin
  ${0}
end
endsnippet


snippet repeat "repeat(N) .."
repeat ( ${1:N} ) begin
  ${0}
end
endsnippet


snippet while "while() .."
while ( ${1:condition} ) begin
  ${2}
end
endsnippet


snippet do "do .. while()"
do begin
  ${0}
end while ( $1 );
endsnippet



#===========================================================================
# Misc
##
snippet fork "fork .. join/join_any/join_none"
fork
  begin
    ${0}
  end
join$1`!p snip.rv = complete( t[1], ['_any', '_none'] );`
endsnippet


snippet function "function .. endfunction"
function ${1:void} ${2:function_name} ($3);
  $0
endfunction: $2
endsnippet


snippet 'init(ial)?' "initial .."
initial begin
  ${1}
end
endsnippet


snippet 'mod(ule)?' "module .. endmodule" br
module ${1:`!v substitute(expand('%:t'), '.v', '', '')`}(
  ${2}
);
endmodule
endsnippet


snippet inst "Instantiate Module"
${1:`!v substitute(expand('%:t'), '_tb.v', '', '')`} $1_dut(${2})
endsnippet



#===========================================================================
# Sequences & Properties
##
snippet prop "Property" b
${1:Label}: ${2:assert}`!p snip.rv = complete(t[2], ['assert', 'cover'] )` property (@(posedge L3CLK)) $0;
endsnippet



#===========================================================================
# OVLs
##
snippet ovl "OVL Select" b
ovl_$1`!p snip.rv = complete( t[1], ['always', 'never', 'never_unknown', 'zero_one_hot'] )`
endsnippet


snippet 'ovl_al(ways)?' "ovl_always" br
ovl_always #(.msg(${1})) assert_${2} (${0});
endsnippet


snippet 'ovl_n(ever)?' "ovl_never" br
ovl_never #(.msg(${1})) assert_${2} (${0});
endsnippet


snippet 'ovl_(01h|zero_one_hot)' "ovl_zero_one_hot" br
ovl_zero_one_hot #(.msg(${0}), .width(1)) assert_${1}
   (.test_expr(), .clock(CONV_ABV_CLK), .reset(1'b1), .enable(CONV_ABV_EN), .fire());
endsnippet


snippet 'ovl_never_unknown' "ovl_never_unknown" b
ovl_never_unknown #(.msg(${0}), .width(1)) assert_${1}
   (.test_expr(), .qualifier(), .clock(CONV_ABV_CLK), .reset(1'b1), .enable(CONV_ABV_EN), .fire());
endsnippet


# vim:ft=snippets:
