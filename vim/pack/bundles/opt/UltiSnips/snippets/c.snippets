# c.snippets - Snippets for c file type
#
# $0 - Final position of cursor
#
# vim-snippets sets priority of c.snippets to -50
# Hence, we set it to -49 to overwrite vim-snippets/c.snippets but not vim-snippets/cpp.snippets
priority -49

#=======================================================================================================================
# Global functions                                                                                                  {{{1
#
global !p
from UltiSnips_globals import *
endglobal



#=======================================================================================================================
# Headers                                                                                                           {{{1
#
snippet inc "#include <>" b
#include <$1`!p
opts = ['stdio.h', 'stdlib.h']
if snip.basename:
  opts.insert(0, snip.basename + '.h')
snip.rv = complete( t[1], opts )
`>
endsnippet


snippet Inc "Include stdio, stdlib" b
#include <stdio.h>
#include <stdlib.h>
endsnippet



#=======================================================================================================================
# #defines                                                                                                          {{{1
#
snippet once "Include header once only guard"
#ifndef ${1:`!p snip.rv = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()`}
#define $1

${VISUAL}${0}

#endif // end of include guard: $1
endsnippet


snippet '#ifd(ef)?' "#ifdef...#define...#endif" br
#ifdef ${1}
  ${VISUAL}${0:${VISUAL/(.*)/(?1::<code>)/}}
#endif
endsnippet


snippet '#ifn(def)?' "#ifndef...#define...#endif" br
#ifndef ${1}
#define ${1:${VISUAL}} ${2:<value>}
#endif
endsnippet


snippet #if "#if...#endif" b
#if ${1:0}
  ${VISUAL}${0:${VISUAL/(.*)/(?1::<code>)/}}
#endif
endsnippet



#=======================================================================================================================
# main()                                                                                                            {{{1
#
snippet main "main()"
int main(${1:int argc, const char *argv[]}) {
  $0
  return 0;
}
endsnippet



#=======================================================================================================================
# Conditionals                                                                                                      {{{1
#
snippet if "if..." b
if (${1:<condition>}) {
  ${VISUAL}${0}
}
endsnippet


snippet eli "else if..." w
else if (${1:<condition>}) {
  ${0}
}
endsnippet


snippet el "else..." w
else {
  ${0}
}
endsnippet


snippet ter "Ternary operator"
${1:<condition>} ? ${2:<true>} : ${3:<false>}
endsnippet


snippet ?: "Ternary operator"
${1:/* condition */} ? ${2:<true>} : ${3:<false>}
endsnippet


snippet 'sw(itch)?' "switch" br
switch (${1:<variable>}) {
case ${2}:
  ${0}
  break;

default:
  break;
}
endsnippet


snippet case "case for switch" b
case ${1:${VISUAL}}:
  ${0}
  break;
endsnippet



#=======================================================================================================================
# Loops                                                                                                             {{{1
#
snippet for "C style for..."
for (${3:i} = ${2:0}; $3 < ${1:count}; ${4:++}$3) {
  ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet


snippet 'wh(ile)?' "while loop" r
while (${1:/* condition */}) {
  ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet


snippet do "do...while loop"
do {
  ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
} while (${1:/* condition */});
endsnippet



#=======================================================================================================================
# Structs/Enums                                                                                                     {{{1
#
snippet 'st(ruct)?' "Struct..." wr
struct ${1:`!p snip.rv = "s" + (snip.basename or "Name")`} {
  ${0:/* data */}
};
endsnippet

snippet 'en(um)?' "Enumeration" wr
enum ${1:name} { $0 };
endsnippet


#=======================================================================================================================
# Misc                                                                                                              {{{1
#
snippet fu "function"
${1:void} ${2:function_name}(${3}) {
  $0
}
endsnippet


snippet 'pr(intf)?' "printf" r
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet


snippet 'fpr(intf)?' "fprintf..." r
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet


snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet



#=======================================================================================================================
# Skeleton                                                                                                          {{{1
##
snippet _skel "Template for new files" b
#include <stdio.h>
#include <stdlib.h>

int main(${1: int argc, const char *argv[] }){
$0
  return 0;
}
endsnippet


# vim:ft=snippets:
